{"version":3,"sources":["components/PriceRetriever.js","components/PriceTable.js","components/RecommendationHandler.js","components/Recommendation.js","App.js","index.js"],"names":["retrievePrice","currency","exchange","action","a","urlDict","urlKey","String","console","log","fetchPrice","price","url","fetch","response","json","obj","bid","ask","data","amount","PriceTable","props","state","BTC_buy","BTC_sell","ETH_buy","ETH_sell","this","tick","timerID","setInterval","clearInterval","BTCBuyPrice","BTCSellPrice","ETHBuyPrice","ETHSellPrice","setState","id","className","colSpan","React","Component","getRecommendation","classVal","left_obj","toLowerCase","right_obj","left_val","document","querySelector","innerHTML","substring","right_val","parseFloat","Recommendation","rec_buy_exchange","rec_sell_exchange","buy_exchange","sell_exchange","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9aee4afa.chunk.js","sourcesContent":["// Function to retrieve prices.\r\nexport default async function retrievePrice(currency, exchange, action) {\r\n\r\n    let urlDict = {\r\n        // Gemini API Links\r\n        'BTC_Gemini' : 'https://api.gemini.com/v1/pubticker/btcusd',\r\n        'ETH_Gemini' : 'https://api.gemini.com/v1/pubticker/ethusd',\r\n\r\n        // Coinbase API Links\r\n        'BTC_Coinbase_Buy' : 'https://api.coinbase.com/v2/prices/BTC-USD/buy',\r\n        'BTC_Coinbase_Sell' : 'https://api.coinbase.com/v2/prices/BTC-USD/sell',\r\n        'ETH_Coinbase_Buy' : 'https://api.coinbase.com/v2/prices/ETH-USD/buy',\r\n        'ETH_Coinbase_Sell' : 'https://api.coinbase.com/v2/prices/ETH-USD/sell'\r\n    }\r\n\r\n    let price;\r\n\r\n    // Convert the args into the proper key format.\r\n    let urlKey;\r\n\r\n    switch(exchange) {\r\n        case ('Gemini'):\r\n            urlKey = String(currency) + '_' + String(exchange);\r\n            break;\r\n        case ('Coinbase'):\r\n            urlKey = String(currency) + '_' + String(exchange) + '_' + String(action);\r\n            action = 'Coinbase'\r\n            break;\r\n        default:\r\n            urlKey = 'undefined';\r\n    }\r\n\r\n    // If the key value doesn't exist, return.\r\n    if(!(urlKey in urlDict)) {\r\n        console.log(\"No key value found for \" + urlKey);\r\n        return;\r\n    }\r\n\r\n    price = await fetchPrice(urlDict[urlKey], action);\r\n    return price;\r\n};\r\n\r\nasync function fetchPrice(url, action) {\r\n    let response = await fetch(url);\r\n    let obj = await response.json();\r\n    \r\n    switch (action) {\r\n        case ('Buy'):\r\n            return obj.bid;\r\n        case ('Sell'):\r\n            return obj.ask;\r\n        case ('Coinbase'):\r\n            return obj.data.amount;\r\n        default:\r\n            console.log('Invalid action passed. Use \\'Buy\\' or \\'Sell\\'')\r\n            return 0;\r\n    }\r\n}","import React from \"react\";\r\nimport retrievePrice from './PriceRetriever.js';\r\n\r\nclass PriceTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            BTC_buy: 0.0,\r\n            BTC_sell: 0.0,\r\n            ETH_buy: 0.0,\r\n            ETH_sell: 0.0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.tick();\r\n\r\n        this.timerID = setInterval(\r\n            () => this.tick(),\r\n            2000\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n\r\n    async tick() {\r\n\r\n        let BTCBuyPrice = await retrievePrice(\"BTC\", this.props.exchange, 'Buy');\r\n        let BTCSellPrice = await retrievePrice(\"BTC\", this.props.exchange, 'Sell');\r\n        let ETHBuyPrice = await retrievePrice(\"ETH\", this.props.exchange, 'Buy');\r\n        let ETHSellPrice = await retrievePrice(\"ETH\", this.props.exchange, 'Sell');\r\n\r\n        this.setState({\r\n            BTC_buy: BTCBuyPrice,\r\n            BTC_sell: BTCSellPrice,\r\n            ETH_buy: ETHBuyPrice,\r\n            ETH_sell: ETHSellPrice \r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <table id={this.props.id} className='price-table'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th colSpan='3' className='table-website-header'>{this.props.exchange}</th>\r\n                        </tr>\r\n                        <tr>\r\n                            <td> </td>\r\n                            <td>Buy Price</td>\r\n                            <td>Sell Price</td>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody className='price-section'>\r\n                        <tr>\r\n                            <td>Bitcoin (BTC)</td>\r\n                            <td className='btc-buy-val'>${this.state.BTC_buy}</td>\r\n                            <td className='btc-sell-val'>${this.state.BTC_sell}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Etherium (ETH)</td>\r\n                            <td className='eth-buy-val'>${this.state.ETH_buy}</td>\r\n                            <td className='eth-sell-val'>${this.state.ETH_sell}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PriceTable;","// Function to retrieve recommendation.\r\nexport default function getRecommendation(currency, action) {\r\n\r\n    // Form class name from arguments\r\n    let classVal = String(currency) + '-' + String(action) + '-val';\r\n\r\n    let left_obj = ('#left-table .' + classVal).toLowerCase();\r\n    let right_obj = ('#right-table .' + classVal).toLowerCase();\r\n\r\n    // Retrieve prices as strings and remove the $ character from the start.\r\n    let left_val = document.querySelector(left_obj).innerHTML.substring(1);\r\n    let right_val = document.querySelector(right_obj).innerHTML.substring(1);\r\n\r\n    // Convert prices from strings to floats/numbers.\r\n    left_val = parseFloat(left_val);\r\n    right_val = parseFloat(right_val);\r\n\r\n    // Turn values negative if buying (as buying is losing money.)\r\n    if (action === 'Buy') {\r\n        left_val *= -1;\r\n        right_val *= -1;\r\n    } else if (action !== 'Sell') {\r\n        console.log('Invalid action passed. Use \\'Buy\\' or \\'Sell\\'')\r\n        return 'ERROR';\r\n    }\r\n\r\n    // Compare and return the larger value. (Less negative number if buying.)\r\n    if (left_val > right_val) {\r\n        return document.querySelector('#left-table .table-website-header').innerHTML;\r\n    } else {\r\n        return document.querySelector('#right-table .table-website-header').innerHTML;\r\n    }\r\n};","import React from \"react\";\r\nimport getRecommendation from './RecommendationHandler.js';\r\n\r\nclass Recommendation extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            rec_buy_exchange: 'LOADING',\r\n            rec_sell_exchange: 'LOADING'\r\n        } \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timerID = setInterval(\r\n            () => this.tick(),\r\n            2000\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n\r\n    tick() {\r\n\r\n        let buy_exchange = getRecommendation(this.props.currency, 'Buy');\r\n        let sell_exchange = getRecommendation(this.props.currency, 'Sell');\r\n\r\n        this.setState({\r\n            rec_buy_exchange: buy_exchange,\r\n            rec_sell_exchange: sell_exchange\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <table className='recommendations'>\r\n                    <tbody className='price-section'>\r\n                        <tr>\r\n                            <td>You should buy {this.props.currency} from {this.state.rec_buy_exchange}.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>You should sell {this.props.currency} from {this.state.rec_sell_exchange}.</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Recommendation;","import './App.css';\n\n// Component Files\nimport PriceTable from './components/PriceTable.js';\nimport Recommendation from './components/Recommendation.js';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <h1 className = 'site-title'>BTC vs. ETH Price Comparison</h1>\n      <div className='price-container'>\n        <PriceTable id='left-table' exchange='Gemini' />\n        <PriceTable id='right-table' exchange='Coinbase' />\n      </div>\n      <p className='recommendation-header'>Recommendations</p>\n      <Recommendation currency='BTC' />\n      <Recommendation currency='ETH' />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}